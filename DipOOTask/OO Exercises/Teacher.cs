///////////////////////////////////////////////////////////
//  Teacher.cs
//  Implementation of the Class Teacher
//  Generated by Enterprise Architect
//  Created on:      11-May-2018 8:24:45 PM
//  Original author: STUDENT
///////////////////////////////////////////////////////////

using System;
using System.Collections.Generic;
using System.Text;
using System.IO;



/// <summary>
/// This is another ABSTRACT class
/// </summary>
public abstract class Teacher : Person {

	private int StaffID;
	private ITeach TeachBehaviour;

	public Teacher(){

	}

	~Teacher(){

	}

	/// <summary>
	/// Calls Base constructor with (pFName, pLName, PGender) signature
	/// 
	/// populates StaffID with pStaffID
	/// </summary>
	/// <param name="pStaffID"></param>
	/// <param name="pFName"></param>
	/// <param name="pLName"></param>
	/// <param name="pGender"></param>
	public Teacher(int pStaffID, string pFName, string pLName, string pGender){

	}

	/// <summary>
	/// overrides default implementation/.
	/// 
	/// still a virtual method
	/// 
	/// The teacher class should override this and return "Teacher"
	/// </summary>
	public override virtual string GetOccupation(){

		return "";
	}

	public int StaffID{
		get{
			return StaffID;
		}
		set{
			StaffID = value;
		}
	}

	/// <summary>
	/// implements parents abstract method
	/// 
	/// calls the<b> TeachBehaviour.Teach</b> method and returns the result of that
	/// method
	/// </summary>
	public override virtual string Work(){

		return "";
	}

}//end Teacher